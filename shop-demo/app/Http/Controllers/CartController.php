<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Product;

class CartController extends Controller
{
    // Hi·ªÉn th·ªã gi·ªè h√†ng
    public function index()
    {
        $cart = session('cart', []);
        $totalPrice = collect($cart)->sum(fn($item) => $item['price'] * $item['quantity']);
        return view('cart.index', compact('cart', 'totalPrice'));
    }

    // Th√™m s·∫£n ph·∫©m v√†o gi·ªè
    public function add(Request $request)
    {
        $request->validate([
            'product_id' => 'required|exists:products,id',
            'quantity' => 'nullable|integer|min:1',
            'size' => 'nullable|string|max:10',
        ]);

        $productId = $request->input('product_id');
        $quantity = $request->input('quantity', 1);
        $size = $request->input('size', 'M'); // üëà m·∫∑c ƒë·ªãnh size M

        $product = Product::findOrFail($productId);
        $cart = session()->get('cart', []);

        $image = $product->image ?? 'default-product.jpg';

        // üëá t·∫°o key ri√™ng bi·ªát theo id + size
        $cartKey = $productId . '_' . $size;

        if (isset($cart[$cartKey])) {
            $cart[$cartKey]['quantity'] += $quantity;
        } else {
            $cart[$cartKey] = [
                'id' => $product->id,
                'name' => $product->name,
                'quantity' => $quantity,
                'price' => $product->price,
                'image' => $image,
                'size' => $size,
            ];
        }

        session()->put('cart', $cart);
        return redirect()->back()->with('success', 'S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m v√†o gi·ªè h√†ng.');
    }

    // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè
    public function update(Request $request)
    {
        $request->validate([
            'product_id' => 'required',
            'quantity' => 'required|integer|min:1',
            'size' => 'required|string|max:10',
        ]);

        $productId = $request->input('product_id');
        $size = $request->input('size');
        $quantity = $request->input('quantity');

        $cartKey = $productId . '_' . $size;

        $cart = session()->get('cart', []);
        if (isset($cart[$cartKey])) {
            $cart[$cartKey]['quantity'] = $quantity;
            session()->put('cart', $cart);
        }

        return redirect()->route('cart.index')->with('success', 'Gi·ªè h√†ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.');
    }

    // Xo√° s·∫£n ph·∫©m kh·ªèi gi·ªè
    public function remove($key)
    {
        $cart = session()->get('cart', []);
        if (isset($cart[$key])) {
            unset($cart[$key]);
            session()->put('cart', $cart);
        }

        return redirect()->route('cart.index')->with('success', 'S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c xo√° kh·ªèi gi·ªè h√†ng.');
    }

    // Mua ngay
    public function buyNow(Request $request)
    {
        $request->validate([
            'product_id' => 'required|exists:products,id',
            'quantity' => 'nullable|integer|min:1',
            'size' => 'nullable|string|max:10',
        ]);

        $productId = $request->input('product_id');
        $quantity = $request->input('quantity', 1);
        $size = $request->input('size', 'M');

        $product = Product::findOrFail($productId);
        $image = $product->image ?? 'default-product.jpg';

        $cartKey = $productId . '_' . $size;

        $cart = [
            $cartKey => [
                'id' => $product->id,
                'name' => $product->name,
                'quantity' => $quantity,
                'price' => $product->price,
                'image' => $image,
                'size' => $size,
            ]
        ];

        session()->put('cart', $cart);

        return redirect()->route('checkout')->with('success', 'Mua ngay th√†nh c√¥ng. Vui l√≤ng thanh to√°n.');
    }
}